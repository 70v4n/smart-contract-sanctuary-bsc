/**
 *Submitted for verification at BscScan.com on 2021-08-31
*/

pragma solidity 0.5.17;interface IBEP20 {  function totalSupply() external view returns (uint256);  function decimals() external view returns (uint8);  function symbol() external view returns (string memory);  function name() external view returns (string memory);  function getOwner() external view returns (address);  function balanceOf(address account) external view returns (uint256);  function approve(address spender, uint256 amount) external returns (bool);  function transfer(address recipient, uint256 amount) external returns (bool);  function allowance(address owner, address spender) external view returns (uint256);  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);  function isPowerPlant2(address server) external view returns (uint8);  function updateEnergy2(address player, uint256 energy) external returns (bool);  function increaseEnergy2(address player, uint256 energy) external returns (bool);  function decreaseEnergy2(address player, uint256 energy) external returns (bool);  function lastEnergy2(address player) external view returns (uint256);  event Approval(address indexed owner, address indexed spender, uint256 value);  event Transfer(address indexed from, address indexed to, uint256 value);}contract KigerPowerPlant {  IBEP20 public KIGER;  address public SERVER;  address public OWNER;  constructor () public {    KIGER = IBEP20(0xe4c7D81386Ae19d3A6dB783143f0867Aff96bd7c);    SERVER = address(this);    OWNER = msg.sender;  }  function isPowerPlant2() external view returns (uint8) {    return KIGER.isPowerPlant2(SERVER);  }  function updateEnergy2(address player, uint256 energy) external returns (bool) {    require(msg.sender != address(0), "ERROR");    return KIGER.updateEnergy2(player, energy);  }  function increaseEnergy2(address player, uint256 energy) external returns (bool) {    require(msg.sender != address(0), "ERROR");    return KIGER.increaseEnergy2(player, energy);  }  function decreaseEnergy2(address player, uint256 energy) external returns (bool) {    require(msg.sender != address(0), "ERROR");    return KIGER.decreaseEnergy2(player, energy);  }  function lastEnergy2(address player) external view returns (uint256) {    require(msg.sender != address(0), "ERROR");    return KIGER.lastEnergy2(player);  }}