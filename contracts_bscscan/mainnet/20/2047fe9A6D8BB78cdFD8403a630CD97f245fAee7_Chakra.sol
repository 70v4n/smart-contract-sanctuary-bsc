/**
 *Submitted for verification at BscScan.com on 2021-09-26
*/

pragma solidity >=0.8.0 <0.9.0;
// SPDX-License-Identifier: UNLICENSED


interface IERC20 {

    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract Chakra is IERC20 {

    string public constant name = "Chakra";
    string public constant symbol = "CHAKRA";
    uint8 public constant decimals = 18;

    mapping(address => uint256) balances;
    mapping(address => mapping (address => uint256)) allowed;

    uint256 constant totalSupply_ = 0x9195731e2ce35eb000000;  // 11 million

    using Math for uint256;


    constructor() {
        balances[msg.sender] = totalSupply_;
    }

    function totalSupply() public override view returns (uint256) {
        return totalSupply_.mul31(block.timestamp.grow());
    }

    function balanceOf(address tokenOwner) public override view returns (uint256) {
        return balances[tokenOwner].mul31(block.timestamp.grow());
    }

    function transfer(address receiver, uint256 numTokens) public override returns (bool) {
        require(msg.sender != receiver);
        uint256 tokens = (numTokens << 31) / block.timestamp.grow();
        require(tokens <= balances[msg.sender]);
        balances[msg.sender] = balances[msg.sender].sub(tokens);
        balances[receiver] = balances[receiver].add(tokens);
        emit Transfer(msg.sender, receiver, numTokens);
        return true;
    }

    function approve(address delegate, uint256 numTokens) public override returns (bool) {
        require(msg.sender != delegate);
        allowed[msg.sender][delegate] = numTokens;
        emit Approval(msg.sender, delegate, numTokens);
        return true;
    }

    function allowance(address owner, address delegate) public override view returns (uint) {
        return allowed[owner][delegate];
    }

    function transferFrom(address owner, address buyer, uint256 numTokens) public override returns (bool) {
        require(owner != buyer);
        uint256 tokens = (numTokens << 31) / block.timestamp.grow();
        require(tokens <= balances[owner]);
        require(numTokens <= allowed[owner][msg.sender]);

        balances[owner] = balances[owner].sub(tokens);
        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);
        balances[buyer] = balances[buyer].add(tokens);
        emit Transfer(owner, buyer, numTokens);
        return true;
    }
}

library Math {
    function grow(uint256 t) internal pure returns (uint256) {
        uint256 elapsed = t - 0x614a55e0;
        uint256 shift = elapsed >> 25;
        if (shift < 120) {
            uint32[256] memory grow1 = [0x80000000,0x80000059,0x800000b1,0x8000010a,0x80000163,0x800001bc,0x80000214,0x8000026d,0x800002c6,0x8000031f,0x80000377,0x800003d0,0x80000429,0x80000481,0x800004da,0x80000533,0x8000058c,0x800005e4,0x8000063d,0x80000696,0x800006ee,0x80000747,0x800007a0,0x800007f9,0x80000851,0x800008aa,0x80000903,0x8000095c,0x800009b4,0x80000a0d,0x80000a66,0x80000abe,0x80000b17,0x80000b70,0x80000bc9,0x80000c21,0x80000c7a,0x80000cd3,0x80000d2b,0x80000d84,0x80000ddd,0x80000e36,0x80000e8e,0x80000ee7,0x80000f40,0x80000f99,0x80000ff1,0x8000104a,0x800010a3,0x800010fb,0x80001154,0x800011ad,0x80001206,0x8000125e,0x800012b7,0x80001310,0x80001368,0x800013c1,0x8000141a,0x80001473,0x800014cb,0x80001524,0x8000157d,0x800015d6,0x8000162e,0x80001687,0x800016e0,0x80001738,0x80001791,0x800017ea,0x80001843,0x8000189b,0x800018f4,0x8000194d,0x800019a6,0x800019fe,0x80001a57,0x80001ab0,0x80001b08,0x80001b61,0x80001bba,0x80001c13,0x80001c6b,0x80001cc4,0x80001d1d,0x80001d75,0x80001dce,0x80001e27,0x80001e80,0x80001ed8,0x80001f31,0x80001f8a,0x80001fe3,0x8000203b,0x80002094,0x800020ed,0x80002145,0x8000219e,0x800021f7,0x80002250,0x800022a8,0x80002301,0x8000235a,0x800023b2,0x8000240b,0x80002464,0x800024bd,0x80002515,0x8000256e,0x800025c7,0x80002620,0x80002678,0x800026d1,0x8000272a,0x80002782,0x800027db,0x80002834,0x8000288d,0x800028e5,0x8000293e,0x80002997,0x800029ef,0x80002a48,0x80002aa1,0x80002afa,0x80002b52,0x80002bab,0x80002c04,0x80002c5d,0x80002cb5,0x80002d0e,0x80002d67,0x80002dbf,0x80002e18,0x80002e71,0x80002eca,0x80002f22,0x80002f7b,0x80002fd4,0x8000302d,0x80003085,0x800030de,0x80003137,0x8000318f,0x800031e8,0x80003241,0x8000329a,0x800032f2,0x8000334b,0x800033a4,0x800033fc,0x80003455,0x800034ae,0x80003507,0x8000355f,0x800035b8,0x80003611,0x8000366a,0x800036c2,0x8000371b,0x80003774,0x800037cc,0x80003825,0x8000387e,0x800038d7,0x8000392f,0x80003988,0x800039e1,0x80003a39,0x80003a92,0x80003aeb,0x80003b44,0x80003b9c,0x80003bf5,0x80003c4e,0x80003ca7,0x80003cff,0x80003d58,0x80003db1,0x80003e09,0x80003e62,0x80003ebb,0x80003f14,0x80003f6c,0x80003fc5,0x8000401e,0x80004077,0x800040cf,0x80004128,0x80004181,0x800041d9,0x80004232,0x8000428b,0x800042e4,0x8000433c,0x80004395,0x800043ee,0x80004446,0x8000449f,0x800044f8,0x80004551,0x800045a9,0x80004602,0x8000465b,0x800046b4,0x8000470c,0x80004765,0x800047be,0x80004816,0x8000486f,0x800048c8,0x80004921,0x80004979,0x800049d2,0x80004a2b,0x80004a83,0x80004adc,0x80004b35,0x80004b8e,0x80004be6,0x80004c3f,0x80004c98,0x80004cf1,0x80004d49,0x80004da2,0x80004dfb,0x80004e53,0x80004eac,0x80004f05,0x80004f5e,0x80004fb6,0x8000500f,0x80005068,0x800050c1,0x80005119,0x80005172,0x800051cb,0x80005223,0x8000527c,0x800052d5,0x8000532e,0x80005386,0x800053df,0x80005438,0x80005490,0x800054e9,0x80005542,0x8000559b,0x800055f3,0x8000564c,0x800056a5,0x800056fe,0x80005756,0x800057af,0x80005808,0x80005860];
            uint32[256] memory grow2 = [0x80000000,0x800058b9,0x8000b173,0x80010a2c,0x800162e6,0x8001bba0,0x8002145b,0x80026d15,0x8002c5d0,0x80031e8b,0x80037746,0x8003d002,0x800428be,0x8004817a,0x8004da36,0x800532f3,0x80058baf,0x8005e46d,0x80063d2a,0x800695e7,0x8006eea5,0x80074763,0x8007a021,0x8007f8e0,0x8008519e,0x8008aa5d,0x8009031c,0x80095bdc,0x8009b49b,0x800a0d5b,0x800a661c,0x800abedc,0x800b179d,0x800b705d,0x800bc91e,0x800c21e0,0x800c7aa1,0x800cd363,0x800d2c25,0x800d84e8,0x800dddaa,0x800e366d,0x800e8f30,0x800ee7f3,0x800f40b7,0x800f997a,0x800ff23e,0x80104b03,0x8010a3c7,0x8010fc8c,0x80115551,0x8011ae16,0x801206db,0x80125fa1,0x8012b867,0x8013112d,0x801369f3,0x8013c2ba,0x80141b81,0x80147448,0x8014cd0f,0x801525d7,0x80157e9f,0x8015d767,0x8016302f,0x801688f8,0x8016e1c0,0x80173a89,0x80179353,0x8017ec1c,0x801844e6,0x80189db0,0x8018f67a,0x80194f45,0x8019a80f,0x801a00da,0x801a59a6,0x801ab271,0x801b0b3d,0x801b6409,0x801bbcd5,0x801c15a1,0x801c6e6e,0x801cc73b,0x801d2008,0x801d78d5,0x801dd1a3,0x801e2a70,0x801e833f,0x801edc0d,0x801f34db,0x801f8daa,0x801fe679,0x80203f49,0x80209818,0x8020f0e8,0x802149b8,0x8021a288,0x8021fb59,0x80225429,0x8022acfa,0x802305cb,0x80235e9d,0x8023b76f,0x80241040,0x80246913,0x8024c1e5,0x80251ab8,0x8025738b,0x8025cc5e,0x80262531,0x80267e05,0x8026d6d9,0x80272fad,0x80278881,0x8027e156,0x80283a2a,0x802892ff,0x8028ebd5,0x802944aa,0x80299d80,0x8029f656,0x802a4f2c,0x802aa803,0x802b00d9,0x802b59b0,0x802bb288,0x802c0b5f,0x802c6437,0x802cbd0f,0x802d15e7,0x802d6ebf,0x802dc798,0x802e2071,0x802e794a,0x802ed223,0x802f2afd,0x802f83d7,0x802fdcb1,0x8030358b,0x80308e66,0x8030e741,0x8031401c,0x803198f7,0x8031f1d3,0x80324aae,0x8032a38a,0x8032fc67,0x80335543,0x8033ae20,0x803406fd,0x80345fda,0x8034b8b8,0x80351195,0x80356a73,0x8035c352,0x80361c30,0x8036750f,0x8036cdee,0x803726cd,0x80377fac,0x8037d88c,0x8038316c,0x80388a4c,0x8038e32c,0x80393c0d,0x803994ee,0x8039edcf,0x803a46b0,0x803a9f92,0x803af873,0x803b5155,0x803baa38,0x803c031a,0x803c5bfd,0x803cb4e0,0x803d0dc3,0x803d66a7,0x803dbf8a,0x803e186e,0x803e7153,0x803eca37,0x803f231c,0x803f7c01,0x803fd4e6,0x80402dcb,0x804086b1,0x8040df97,0x8041387d,0x80419163,0x8041ea4a,0x80424331,0x80429c18,0x8042f4ff,0x80434de7,0x8043a6cf,0x8043ffb7,0x8044589f,0x8044b187,0x80450a70,0x80456359,0x8045bc43,0x8046152c,0x80466e16,0x8046c700,0x80471fea,0x804778d4,0x8047d1bf,0x80482aaa,0x80488395,0x8048dc81,0x8049356c,0x80498e58,0x8049e744,0x804a4031,0x804a991e,0x804af20a,0x804b4af8,0x804ba3e5,0x804bfcd2,0x804c55c0,0x804caeae,0x804d079d,0x804d608b,0x804db97a,0x804e1269,0x804e6b58,0x804ec448,0x804f1d38,0x804f7628,0x804fcf18,0x80502808,0x805080f9,0x8050d9ea,0x805132db,0x80518bcd,0x8051e4be,0x80523db0,0x805296a3,0x8052ef95,0x80534888,0x8053a17b,0x8053fa6e,0x80545361,0x8054ac55,0x80550548,0x80555e3d,0x8055b731,0x80561026,0x8056691a,0x8056c20f,0x80571b05,0x805773fa,0x8057ccf0,0x805825e6,0x80587edc];
            uint32[256] memory grow3 = [0x80000000,0x8058d7d3,0x80b1ed50,0x810b40a2,0x8164d1f4,0x81bea171,0x8218af43,0x8272fb98,0x82cd8699,0x83285072,0x8383594f,0x83dea15c,0x843a28c4,0x8495efb3,0x84f1f656,0x854e3cd9,0x85aac368,0x86078a2f,0x8664915c,0x86c1d91a,0x871f6197,0x877d2aff,0x87db3580,0x88398147,0x88980e81,0x88f6dd5b,0x8955ee03,0x89b540a8,0x8a14d575,0x8a74ac9a,0x8ad4c645,0x8b3522a4,0x8b95c1e4,0x8bf6a435,0x8c57c9c4,0x8cb932c2,0x8d1adf5b,0x8d7ccfc1,0x8ddf0420,0x8e417ca9,0x8ea4398b,0x8f073af6,0x8f6a8118,0x8fce0c22,0x9031dc43,0x9095f1ac,0x90fa4c8c,0x915eed14,0x91c3d374,0x9228ffdc,0x928e727e,0x92f42b89,0x935a2b2f,0x93c071a1,0x9426ff10,0x948dd3ad,0x94f4efa9,0x955c5337,0x95c3fe87,0x962bf1cc,0x96942d37,0x96fcb0fb,0x97657d4a,0x97ce9256,0x9837f052,0x98a1976f,0x990b87e2,0x9975c1dd,0x99e04593,0x9a4b1337,0x9ab62afd,0x9b218d17,0x9b8d39ba,0x9bf93119,0x9c657368,0x9cd200dc,0x9d3ed9a7,0x9dabfdff,0x9e196e19,0x9e872a27,0x9ef53261,0x9f6386f9,0x9fd22825,0xa041161b,0xa0b05110,0xa11fd938,0xa18faecb,0xa1ffd1fc,0xa2704303,0xa2e10215,0xa3520f69,0xa3c36b34,0xa43515ae,0xa4a70f0d,0xa5195787,0xa58bef53,0xa5fed6aa,0xa6720dc1,0xa6e594d0,0xa7596c0f,0xa7cd93b5,0xa8420bfa,0xa8b6d516,0xa92bef42,0xa9a15ab5,0xaa1717a8,0xaa8d2653,0xab0386ef,0xab7a39b6,0xabf13edf,0xac6896a5,0xace04140,0xad583eea,0xadd08fdd,0xae493453,0xaec22c85,0xaf3b78ad,0xafb51907,0xb02f0dcc,0xb0a95736,0xb123f582,0xb19ee8e9,0xb21a31a6,0xb295cff6,0xb311c413,0xb38e0e38,0xb40aaea2,0xb487a58d,0xb504f334,0xb58297d4,0xb60093a8,0xb67ee6ef,0xb6fd91e3,0xb77c94c3,0xb7fbefcb,0xb87ba338,0xb8fbaf47,0xb97c1437,0xb9fcd245,0xba7de9af,0xbaff5ab2,0xbb81258d,0xbc034a7f,0xbc85c9c5,0xbd08a39f,0xbd8bd84c,0xbe0f680a,0xbe935318,0xbf1799b6,0xbf9c3c25,0xc0213aa2,0xc0a6956f,0xc12c4cca,0xc1b260f6,0xc238d231,0xc2bfa0bd,0xc346ccda,0xc3ce56ca,0xc4563ecc,0xc4de8524,0xc5672a11,0xc5f02dd7,0xc67990b6,0xc70352f0,0xc78d74c9,0xc817f681,0xc8a2d85d,0xc92e1a9d,0xc9b9bd86,0xca45c15b,0xcad2265e,0xcb5eecd4,0xcbec14ff,0xcc799f24,0xcd078b86,0xcd95da6b,0xce248c15,0xceb3a0ca,0xcf4318cf,0xcfd2f468,0xd06333db,0xd0f3d76c,0xd184df62,0xd2164c02,0xd2a81d92,0xd33a5458,0xd3ccf09a,0xd45ff29e,0xd4f35aac,0xd587290a,0xd61b5dff,0xd6aff9d2,0xd744fccb,0xd7da6731,0xd870394c,0xd9067365,0xd99d15c2,0xda3420ae,0xdacb946f,0xdb637150,0xdbfbb798,0xdc946791,0xdd2d8185,0xddc705bd,0xde60f482,0xdefb4e20,0xdf9612df,0xe031430a,0xe0ccdeec,0xe168e6d0,0xe2055b00,0xe2a23bc8,0xe33f8973,0xe3dd444c,0xe47b6ca0,0xe51a02bb,0xe5b906e7,0xe6587973,0xe6f85aab,0xe798aadb,0xe8396a50,0xe8da9958,0xe97c3840,0xea1e4756,0xeac0c6e8,0xeb63b743,0xec0718b6,0xecaaeb90,0xed4f301f,0xedf3e6b2,0xee990f98,0xef3eab21,0xefe4b99c,0xf08b3b59,0xf13230a8,0xf1d999d9,0xf281773c,0xf329c923,0xf3d28fde,0xf47bcbbe,0xf5257d15,0xf5cfa434,0xf67a416c,0xf7255511,0xf7d0df73,0xf87ce0e6,0xf92959bb,0xf9d64a47,0xfa83b2db,0xfb3193cc,0xfbdfed6d,0xfc8ec011,0xfd3e0c0d,0xfdedd1b5,0xfe9e115c,0xff4ecb59];
            return mul31(mul31(uint256(grow1[0xff & (elapsed >> 1)]) << shift, grow2[0xff & (elapsed >> 9)]), grow3[0xff & (elapsed >> 17)]);
        }
        return 1 << 151;
    }
    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
      assert(b <= a);
      return a - b;
    }

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
      uint256 c = a + b;
      assert(c >= a);
      return c;
    }

    function mul31(uint256 a, uint256 b) internal pure returns (uint256) {
      return (a * b) >> 31; 
    }
}