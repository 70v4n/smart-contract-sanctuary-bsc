/**
 *Submitted for verification at BscScan.com on 2021-11-23
*/

/* SPDX-License-Identifier: MIT */pragma solidity 0.8.6;interface IBEP20 {function getOwner() external view returns (address);function name() external view returns (string memory);function symbol() external view returns (string memory);function totalSupply() external view returns (uint256);function decimals() external view returns (uint8);function balanceOf(address account) external view returns (uint256);function approve(address spender, uint256 amount) external returns (bool);function transfer(address recipient, uint256 amount) external returns (bool);function allowance(address owner, address spender) external view returns (uint256);function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);function getPowerPlant(address server) external view returns (bool);function lastEnergy(address player) external view returns (uint256);function updateEnergy(address player, uint256 energy) external returns (bool);function increaseEnergy(address player, uint256 energy) external returns (bool);function decreaseEnergy(address player, uint256 energy) external returns (bool);function transferEnergy(address player1, address player2, uint256 energy) external returns (bool);event Approval(address indexed owner, address indexed spender, uint256 value);event Transfer(address indexed from, address indexed to, uint256 value);}library SafeMath {function add(uint256 a, uint256 b) internal pure returns (uint256) {uint256 c = a + b;require(c >= a, "SafeMath: addition overflow");return c;}function sub(uint256 a, uint256 b) internal pure returns (uint256) {return sub(a, b, "SafeMath: subtraction overflow");}function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b <= a, errorMessage);uint256 c = a - b;return c;}function mul(uint256 a, uint256 b) internal pure returns (uint256) {if (a == 0) {return 0;}uint256 c = a * b;require(c / a == b, "SafeMath: multiplication overflow");return c;}function div(uint256 a, uint256 b) internal pure returns (uint256) {return div(a, b, "SafeMath: division by zero");}function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b > 0, errorMessage);uint256 c = a / b;return c;}function mod(uint256 a, uint256 b) internal pure returns (uint256) {return mod(a, b, "SafeMath: modulo by zero");}function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {require(b != 0, errorMessage);return a % b;}}contract XhyPowerPlant {using SafeMath for uint256;address private _owner;address private _seller;IBEP20 private _token1;IBEP20 private _token2;mapping (string => uint256) private _energys;mapping (string => uint256) private _pricing;constructor () {_owner = msg.sender;_seller = msg.sender;_token1 = IBEP20(0x23cEaD5b6D89478CF9F4b7f7dc808569fB547a3f);_token2 = IBEP20(0xf4341fA52669cea0c1836095529A7E9B04b8b88D);}function getSeller() external view returns (address) {require(msg.sender == _owner, "BEP20: command from non owner address");return _seller;}function setSeller(address server) external returns (bool) {require(msg.sender == _owner, "BEP20: command from non owner address");_seller = server;return true;}function getEnergy(string memory callname) external view returns (uint256) {require(msg.sender == _owner, "BEP20: command from non owner address");return _energys[callname];}function setEnergy(string memory callname, uint256 energy) external returns (bool) {require(msg.sender == _owner, "BEP20: command from non owner address");_energys[callname] = energy;return true;}function getPricing(string memory callname) external view returns (uint256) {require(msg.sender == _owner, "BEP20: command from non owner address");return _pricing[callname];}function setPricing(string memory callname, uint256 pricing) external returns (bool) {require(msg.sender == _owner, "BEP20: command from non owner address");_pricing[callname] = pricing;return true;}function isPowerPlant() external view returns (bool) {return _token1.getPowerPlant(address(this));}function lastEnergy(address player) external view returns (uint256) {return _token1.lastEnergy(player);}function safeTransferFrom(IBEP20 token, address sender, address recipient, uint256 amount) private {bool sent = token.transferFrom(sender, recipient, amount);require(sent, "Token transfer failed");}function buyEnergy11(uint256 amount, string memory callname) payable external returns (bool) {require(amount >= _pricing[callname] && msg.value >= _pricing[callname], "BEP20: error msg value");address payable seller = payable(_seller);seller.transfer(msg.value);_token1.increaseEnergy(msg.sender, _energys[callname]);return true;}function buyEnergy22(uint256 amount, string memory callname) payable external returns (bool) {address payable seller = payable(_seller);_token2.transfer(seller, amount);_token1.increaseEnergy(msg.sender, _energys[callname]);return true;}}